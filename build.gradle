apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: 'eclipse-wtp'
apply plugin: "java"
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
	mavenLocal()
    mavenCentral()
}

// Jetty
jettyRun.contextPath = '' 

// WEB APP
def springVersion = "3.2.6.RELEASE"
def springSecurityVersion = "3.2.0.RELEASE"
def slf4jVersion = "1.6.4"
def mockitoversion = "1.8.5"
def aspectjVersion = "1.6.9"
def thymeleafVersion = "2.1.2.RELEASE"

sourceCompatibility = 1.6
targetCompatibility = 1.6

war.baseName = "$name"
war.version = version
war.manifest { attributes("Implementation-Version": version) }
war.manifest { attributes("WebApp-Implementation-Version": version) }

configurations {
	compile.exclude group: "commons-logging", module: "commons-logging"
	all*.exclude group: 'org.gradle.test.excludes', module: 'reports'
}

dependencies {
	// spring libs
	compile "org.springframework:spring-webmvc:$springVersion"
	compile "org.springframework:spring-core:$springVersion"
	compile "org.springframework:spring-context:$springVersion"
	compile "org.springframework:spring-context-support:$springVersion"
	compile "org.springframework:spring-beans:$springVersion"
	compile "org.springframework.security:spring-security-core:$springSecurityVersion"
	compile "org.springframework.security:spring-security-config:$springSecurityVersion"
	compile "org.springframework.security:spring-security-acl:$springSecurityVersion"
	compile "org.springframework.security:spring-security-taglibs:$springSecurityVersion"
	compile "org.springframework.security:spring-security-web:$springSecurityVersion"
	compile "org.thymeleaf:thymeleaf-spring3:$thymeleafVersion"
	
	// test
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "junit:junit:4.11"
	testCompile "cglib:cglib-nodep:2.2.2"
	testCompile "org.mockito:mockito-all:$mockitoversion"

	//aspects
	compile "org.springframework:spring-aop:$springVersion"
	compile "org.springframework:spring-aspects:$springVersion"
	compile "org.aspectj:aspectjrt:$aspectjVersion"
	compile "org.aspectj:aspectjweaver:$aspectjVersion"

	// web
	providedCompile "javax.servlet:jstl:1.2"
	providedCompile "javax.servlet:servlet-api:2.5"
	providedCompile "javax.servlet.jsp:jsp-api:2.0"
	
	// logging
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
	compile "log4j:log4j:1.2.16"

	// java utility
	compile "commons-collections:commons-collections:3.2.1"
	compile "commons-codec:commons-codec:1.7"
	compile "commons-io:commons-io:2.4"
	compile "commons-discovery:commons-discovery:0.5"
	compile "org.apache.commons:commons-lang3:3.1"
	compile ("commons-digester:commons-digester:2.1")
	//compile "com.google.guava:guava:13.0.1"
	compile "org.apache.httpcomponents:httpclient:4.2.2"
	compile "joda-time:joda-time:2.1"

	// object model serialization
	compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
	compile "org.codehaus.jackson:jackson-core-asl:1.9.12"
	compile "net.sf.flexjson:flexjson:2.1"
}

eclipse {
	wtp {
		component {
			contextPath = "$war.baseName"
		}
	}
}
sourceSets {
    funcTest {
        groovy {            srcDir 'src/functest/groovy'        }
        resources {            srcDir 'src/functest/resources'        }
    }
	intTest {
		java {	srcDir 'src/inttest/java' }
		groovy { srcDir 'src/inttest/groovy'		}
		resources {			srcDir 'src/inttest/resources'		}
	}
	test {
		java {	srcDir 'src/test/java' }
		groovy { srcDir 'src/test/groovy'		}
		resources {			srcDir 'src/test/resources'		}
	}
}





// FUNC TEST

// The drivers we want to use
ext.drivers = ["firefox", "safari"]


dependencies {
    def gebVersion = "0.9.2"
    def seleniumVersion = "2.37.0"

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
	testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
	drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        testReportDir = reporting.file("$name/tests")
        testResultsDir = file("$buildDir/test-results/$name")

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

test {
	dependsOn drivers.collect { tasks["${it}Test"] }
	enabled = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}
